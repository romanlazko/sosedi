<?php 

namespace App\Bots\pozor_sosedi_bot\Commands\AdminCommands;

use Romanlazko\Telegram\App\BotApi;
use App\Bots\pozor_sosedi_bot\Events\AnnouncementPublished;
use App\Bots\pozor_sosedi_bot\Models\Announcement;
use Romanlazko\Telegram\App\Commands\Command;
use Romanlazko\Telegram\App\Config;
use Romanlazko\Telegram\App\Entities\Response;
use Romanlazko\Telegram\App\Entities\Update;
use Romanlazko\Telegram\Exceptions\TelegramException;
use Romanlazko\Telegram\Exceptions\TelegramUserException;

class PublicAnnouncement extends Command
{
    public static $command = 'public';

    public static $title = [
        'ru' => '–ü—É–±–ª–∏–∫—É–µ–º',
        'en' => 'Public',
    ];

    public static $usage = ['public'];

    protected $enabled = true;

    public function execute(Update $updates): Response
    {
        $announcement = Announcement::findOr($updates->getInlineData()?->getAnnouncementId(), function () {
            throw new TelegramUserException("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        });

        if ($announcement->status !== 'new') {
            throw new TelegramUserException("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ");
        }

        try {
            $response = BotApi::sendMessageWithMedia([
                'text'                      => $this->prepare($announcement->toArray()),
                'chat_id'                   => Config::get($announcement->city),
                'media'                     => $announcement->photos->pluck('file_id')->toArray() ?? null,
                'parse_mode'                => 'HTML',
                'disable_web_page_preview'  => 'true',
            ]);

            if ($response->getOk()) {
                $announcement->update([
                    'status' => 'published'
                ]);
        
                event(new AnnouncementPublished($announcement));
            }
        }
        catch (TelegramException $exception) {
            throw new TelegramUserException("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {$exception->getMessage()}");
        }

        return $this->bot->executeCommand(MenuCommand::$command);
    }

    private function prepare($notes)
    {
        $text = [];

        if (isset($notes['type'])) {
            $types = [
                'buy' => '#–∫—É–ø–ª—é',
                'sell' => '#–ø—Ä–æ–¥–∞–º',
                'rent' => '#—Å–Ω–∏–º—É',
                'lease' => '#—Å–¥–∞–º',
            ];

            $text[] = $types[$notes['type']];
        }

        if (isset($notes['title'])) {
            $text[] = "<b>{$notes['title']}</b>";
        }

        if (isset($notes['caption'])) {
            $text[] = $notes['caption'];
        }

        $params = [];

        if (isset($notes['term']) AND $notes['term'] != 0) {
            $terms = [
                'long' => "–∫–∞–∫ –º–æ–∂–Ω–æ –¥–æ–ª—å—à–µ",
                '3m' => "3 –º–µ—Å—è—Ü–∞",
                '6m' => "6 –º–µ—Å—è—Ü–µ–≤",
                '12m' => "12 –º–µ—Å—è—Ü–µ–≤"
            ];

            if (isset($terms[$notes['term']])) {
                $params[] = "<i>–°—Ä–æ–∫:</i> ".$terms[$notes['term']];
            }else {
                $params[] = "<i>–°—Ä–æ–∫:</i> ".$notes['term'];
            }
        }

        if (isset($notes['cost'])) {
            $params[] = "<i>–°—Ç–æ–∏–º–æ—Å—Ç—å:</i> {$notes['cost']} CZK";
        }

        if (isset($notes['kauce'])) {
            $params[] = "<i>–ó–∞–ª–æ–≥:</i> {$notes['kauce']} CZK";
        }

        if (isset($notes['location'])) {
            $params[] = "<i>–õ–æ–∫–∞—Ü–∏—è:</i> ".$notes['location'];
        }

        $text[] = implode("\n", $params);

        if (isset($notes['id'])) {
            $text[] = "<a href='https://t.me/". Config::get('bot_username') ."?start=announcement={$notes['id']}'>üîó–ö–æ–Ω—Ç–∞–∫—Ç</a> (<i>–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –Ω–∞–∂–º–∏ <b>–ù–∞—á–∞—Ç—å</b></i>)";
        }

        if (isset($notes['category'])) {
            $categories = [
                'f' => '#–∫–≤–∞—Ä—Ç–∏—Ä–∞',
                'h' => '#–¥–æ–º',
                'r' => '#–∫–æ–º–Ω–∞—Ç–∞',
                's' => '#–º–µ—Å—Ç–æ_–≤_–∫–æ–º–Ω–∞—Ç–µ',
            ];

            $text[] = implode(' ', array_map(function ($char) use ($categories) {
                return $categories[$char];
            }, array_filter(str_split($notes['category']), function ($char) {
                return $char != ':';
            })));
        }

        return implode("\n\n", $text);
    }
}
